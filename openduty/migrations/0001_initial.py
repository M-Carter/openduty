# Generated by Django 2.1.3 on 2018-11-20 19:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('schedule', '0011_event_calendar_not_null'),
        ('auth', '0009_alter_user_last_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('acknowledge', 'acknowledge'), ('unacknowledge', 'unacknowledge'), ('resolve', 'resolve'), ('silence_service', 'silence service'), ('unsilence_service', 'unsilence service'), ('silence_incident', 'silence incident'), ('unsilence_incident', 'unsilence incident'), ('forward', 'forward'), ('log', 'log'), ('notified', 'notified'), ('notification_failed', 'notification failed'), ('trigger', 'trigger')], default='log', max_length=100)),
                ('data', models.TextField()),
                ('occurred_at', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'eventlog',
                'verbose_name_plural': 'eventlog',
            },
        ),
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('incident_key', models.CharField(max_length=200)),
                ('event_type', models.CharField(max_length=15)),
                ('description', models.CharField(max_length=200)),
                ('details', models.TextField()),
                ('occurred_at', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'incidents',
                'verbose_name_plural': 'incidents',
            },
        ),
        migrations.CreateModel(
            name='IncidentSilenced',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('silenced', models.BooleanField(default=False)),
                ('silenced_until', models.DateTimeField()),
                ('incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='openduty.Incident')),
            ],
        ),
        migrations.CreateModel(
            name='SchedulePolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
                ('repeat_times', models.IntegerField()),
            ],
            options={
                'verbose_name': 'schedule_policy',
                'verbose_name_plural': 'schedule_policies',
            },
        ),
        migrations.CreateModel(
            name='SchedulePolicyRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
                ('escalate_after', models.IntegerField()),
                ('group_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schedule.Calendar')),
                ('schedule_policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='openduty.SchedulePolicy')),
                ('user_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'schedule_policy_rule',
                'verbose_name_plural': 'schedule_policy_rules',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('name', models.CharField(max_length=80, unique=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('retry', models.IntegerField(blank=True, null=True)),
                ('escalate_after', models.IntegerField(blank=True, null=True)),
                ('notifications_disabled', models.BooleanField(default=False)),
                ('send_resolve_enabled', models.BooleanField(default=False)),
                ('policy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='openduty.SchedulePolicy')),
            ],
            options={
                'verbose_name': 'service',
                'verbose_name_plural': 'service',
            },
        ),
        migrations.CreateModel(
            name='ServiceSilenced',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('silenced', models.BooleanField(default=False)),
                ('silenced_until', models.DateTimeField()),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='openduty.Service')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceTokens',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('service_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='openduty.Service')),
            ],
            options={
                'verbose_name': 'service_tokens',
                'verbose_name_plural': 'service_tokens',
            },
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=50)),
                ('pushover_user_key', models.CharField(max_length=50)),
                ('pushover_app_key', models.CharField(max_length=50)),
                ('slack_room_name', models.CharField(max_length=50)),
                ('prowl_api_key', models.CharField(blank=True, max_length=50)),
                ('prowl_application', models.CharField(blank=True, max_length=256)),
                ('prowl_url', models.CharField(blank=True, max_length=512)),
                ('rocket_webhook_url', models.CharField(blank=True, max_length=512)),
                ('hipchat_room_name', models.CharField(max_length=100)),
                ('hipchat_room_url', models.CharField(max_length=100)),
                ('send_resolve_enabled', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='servicetokens',
            name='token_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='openduty.Token'),
        ),
        migrations.AddField(
            model_name='incident',
            name='service_key',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incident', to='openduty.Service'),
        ),
        migrations.AddField(
            model_name='incident',
            name='service_to_escalate_to',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service_to_escalate_to_id', to='openduty.Service'),
        ),
        migrations.AddField(
            model_name='eventlog',
            name='incident_key',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='openduty.Incident'),
        ),
        migrations.AddField(
            model_name='eventlog',
            name='service_key',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='openduty.Service'),
        ),
        migrations.AddField(
            model_name='eventlog',
            name='user',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='incident',
            unique_together={('service_key', 'incident_key')},
        ),
    ]
